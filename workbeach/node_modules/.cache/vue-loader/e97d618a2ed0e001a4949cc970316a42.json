{"remainingRequest":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/MAMP/gopath/vue-antd-admin/src/pages/components/Palette.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Applications/MAMP/gopath/vue-antd-admin/src/pages/components/Palette.vue","mtime":1598927029013},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb2xvckNoZWNrYm94IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY2hlY2tib3gvQ29sb3JDaGVja2JveCcKCmNvbnN0IENvbG9yQ2hlY2tib3hHcm91cCA9IENvbG9yQ2hlY2tib3guR3JvdXAKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnUGFsZXR0ZScsCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBjb2xvcjogJ3JnYigyNDUsIDM0LCA0NSknCiAgICB9CiAgfSwKICBjb21wb25lbnRzOiB7Q29sb3JDaGVja2JveCwgQ29sb3JDaGVja2JveEdyb3VwfSwKICBtZXRob2RzOiB7CiAgICBjaGFuZ2VDb2xvciAodmFsdWVzLCBjb2xvcnMpIHsKICAgICAgdGhpcy5jb2xvciA9IHRoaXMuY2FsY3VsYXRlQ29sb3IoY29sb3JzKQogICAgfSwKICAgIGNhbGN1bGF0ZUNvbG9yIChjb2xvcnMpIHsKICAgICAgbGV0IHJlZCA9IDAKICAgICAgbGV0IGdyZWVuID0gMAogICAgICBsZXQgYmx1ZSA9IDAKICAgICAgbGV0IHZhbHVlcwogICAgICBjb2xvcnMuZm9yRWFjaChjb2xvciA9PiB7CiAgICAgICAgdmFsdWVzID0gY29sb3Iuc3BsaXQoJygnKVsxXS5zcGxpdCgnKScpWzBdLnNwbGl0KCcsJykKICAgICAgICByZWQgPSBNYXRoLm1heChyZWQsIHBhcnNlSW50KHZhbHVlc1swXSkpCiAgICAgICAgZ3JlZW4gKz0gTWF0aC5tYXgoZ3JlZW4sIHBhcnNlSW50KHZhbHVlc1sxXSkpCiAgICAgICAgYmx1ZSArPSBNYXRoLm1heChibHVlLCBwYXJzZUludCh2YWx1ZXNbMl0pKQogICAgICB9KQogICAgICByZXR1cm4gJ3JnYignICsgcmVkICsgJywnICsgZ3JlZW4gKyAnLCcgKyBibHVlICsgJyknCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Palette.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Palette.vue","sourceRoot":"src/pages/components","sourcesContent":["<template>\n  <div style=\"text-align: center; margin-top: 48px\">\n    <color-checkbox-group :defaultValues=\"['1', '3', '4']\" @change=\"changeColor\" :multiple=\"true\" style=\"display: inline-block\">\n      <color-checkbox color=\"rgb(245, 34, 45)\" value=\"1\" />\n      <color-checkbox color=\"rgb(250, 84, 28)\" value=\"2\" />\n      <color-checkbox color=\"rgb(250, 173, 20)\" value=\"3\" />\n      <color-checkbox color=\"rgb(19, 194, 194)\" value=\"4\" />\n      <color-checkbox color=\"rgb(82, 196, 26)\" value=\"5\" />\n      <color-checkbox color=\"rgb(24, 144, 255)\" value=\"6\" />\n      <color-checkbox color=\"rgb(47, 84, 235)\" value=\"7\" />\n      <color-checkbox color=\"rgb(114, 46, 209)\" value=\"8\" />\n      <color-checkbox color=\"rgb(256, 0, 0)\" value=\"9\" />\n      <color-checkbox color=\"rgb(0, 256, 0)\" value=\"10\" />\n      <color-checkbox color=\"rgb(0, 0, 256)\" value=\"11\" />\n      <color-checkbox color=\"rgb(256, 256, 0)\" value=\"12\" />\n    </color-checkbox-group>\n    <div></div>\n    <div class=\"view-color\" :style=\"{backgroundColor: color}\"/>\n  </div>\n</template>\n\n<script>\nimport ColorCheckbox from '../../components/checkbox/ColorCheckbox'\n\nconst ColorCheckboxGroup = ColorCheckbox.Group\n\nexport default {\n  name: 'Palette',\n  data () {\n    return {\n      color: 'rgb(245, 34, 45)'\n    }\n  },\n  components: {ColorCheckbox, ColorCheckboxGroup},\n  methods: {\n    changeColor (values, colors) {\n      this.color = this.calculateColor(colors)\n    },\n    calculateColor (colors) {\n      let red = 0\n      let green = 0\n      let blue = 0\n      let values\n      colors.forEach(color => {\n        values = color.split('(')[1].split(')')[0].split(',')\n        red = Math.max(red, parseInt(values[0]))\n        green += Math.max(green, parseInt(values[1]))\n        blue += Math.max(blue, parseInt(values[2]))\n      })\n      return 'rgb(' + red + ',' + green + ',' + blue + ')'\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n  .view-color{\n    margin-top: 48px;\n    display: inline-block;\n    height: 96px;\n    width: 96px;\n    border-radius: 48px;\n    border: 1px dashed gray;\n  }\n</style>\n"]}]}