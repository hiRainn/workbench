{"remainingRequest":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/MAMP/gopath/vue-antd-admin/src/layouts/tabs/TabsView.vue?vue&type=style&index=0&id=012d64c5&scoped=true&lang=less&","dependencies":[{"path":"/Applications/MAMP/gopath/vue-antd-admin/src/layouts/tabs/TabsView.vue","mtime":1598927029008},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50YWJzLXZpZXctY29udGVudHsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0K"},{"version":3,"sources":["TabsView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgNA;AACA;AACA","file":"TabsView.vue","sourceRoot":"src/layouts/tabs","sourcesContent":["<template>\n  <admin-layout>\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" @select=\"onMenuSelect\" />\n    <a-tabs\n      v-if=\"multiPage\"\n      type=\"editable-card\"\n      :active-key=\"activePage\"\n      :style=\"`margin: -16px auto 8px; ${layout == 'head' ? 'max-width: 1400px;' : ''}`\"\n      :hide-add=\"true\"\n      @change=\"changePage\"\n      @edit=\"editPage\"\n      @contextmenu=\"onContextmenu\"\n    >\n      <a-tab-pane :key=\"page.fullPath\" v-for=\"page in pageList\">\n        <span slot=\"tab\" :pagekey=\"page.fullPath\">{{pageName(page)}}</span>\n      </a-tab-pane>\n    </a-tabs>\n    <div class=\"tabs-view-content\" :style=\"`margin-top: ${multiPage ? -24 : 0}px`\">\n      <page-toggle-transition :disabled=\"animate.disabled\" :animate=\"animate.name\" :direction=\"animate.direction\">\n        <a-keep-alive v-if=\"multiPage\" v-model=\"clearCaches\">\n          <router-view ref=\"tabContent\" :key=\"$route.fullPath\" />\n        </a-keep-alive>\n        <router-view v-else />\n      </page-toggle-transition>\n    </div>\n  </admin-layout>\n</template>\n\n<script>\nimport AdminLayout from '@/layouts/AdminLayout'\nimport Contextmenu from '@/components/menu/Contextmenu'\nimport PageToggleTransition from '@/components/transition/PageToggleTransition'\nimport {mapState, mapMutations} from 'vuex'\nimport {getI18nKey} from '@/utils/routerUtil'\nimport AKeepAlive from '@/components/cache/AKeepAlive'\n\nexport default {\n  name: 'TabsView',\n  i18n: require('./i18n'),\n  components: { PageToggleTransition, Contextmenu, AdminLayout , AKeepAlive },\n  data () {\n    return {\n      clearCaches: [],\n      pageList: [],\n      cachedKeys: [],\n      activePage: '',\n      menuVisible: false\n    }\n  },\n  computed: {\n    ...mapState('setting', ['multiPage', 'animate', 'layout']),\n    menuItemList() {\n      return [\n        { key: '1', icon: 'vertical-right', text: this.$t('closeLeft') },\n        { key: '2', icon: 'vertical-left', text: this.$t('closeRight') },\n        { key: '3', icon: 'close', text: this.$t('closeOthers') }\n      ]\n    },\n    tabsOffset() {\n      return this.multiPage ? 24 : 0\n    }\n  },\n  created () {\n    const route = this.$route\n    this.pageList.push(route)\n    this.activePage = route.fullPath\n    if (this.multiPage) {\n      window.addEventListener('page:close', this.closePageListener)\n    }\n  },\n  mounted () {\n    this.correctPageMinHeight(-this.tabsOffset)\n    if(this.multiPage){\n      this.cachedKeys.push(this.$refs.tabContent.$vnode.key)\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('page:close', this.closePageListener)\n    this.correctPageMinHeight(this.tabsOffset)\n  },\n  watch: {\n    '$route': function (newRoute) {\n      this.activePage = newRoute.fullPath\n      if (!this.multiPage) {\n        this.pageList = [newRoute]\n      } else if (this.pageList.findIndex(item => item.fullPath == newRoute.fullPath) == -1) {\n        this.$nextTick(() => {\n          this.cachedKeys.push(this.$refs.tabContent.$vnode.key)\n        })\n        this.pageList.push(newRoute)\n      }\n    },\n    'multiPage': function (newVal) {\n      if (!newVal) {\n        this.pageList = [this.$route]\n        window.removeEventListener('page:close', this.closePageListener)\n      } else {\n        window.addEventListener('page:close', this.closePageListener)\n      }\n    },\n    tabsOffset(newVal, oldVal) {\n      this.correctPageMinHeight(oldVal - newVal)\n    }\n  },\n  methods: {\n    changePage (key) {\n      this.activePage = key\n      this.$router.push(key)\n    },\n    editPage (key, action) {\n      this[action](key) // remove\n    },\n    remove (key, next) {\n      if (this.pageList.length === 1) {\n        return this.$message.warning(this.$t('warn'))\n      }\n      let index = this.pageList.findIndex(item => item.fullPath === key)\n      //清除缓存\n      this.clearCaches = this.cachedKeys.splice(index, 1)\n      this.pageList.splice(index, 1)\n      if (next) {\n        this.$router.push(next)\n      } else if (key === this.activePage) {\n        index = index >= this.pageList.length ? this.pageList.length - 1 : index\n        this.activePage = this.pageList[index].fullPath\n        this.$router.push(this.activePage)\n      }\n    },\n    onContextmenu (e) {\n      const pageKey = getPageKey(e.target)\n      if (pageKey) {\n        e.preventDefault()\n        this.menuVisible = true\n      }\n    },\n    onMenuSelect (key, target) {\n      let pageKey = getPageKey(target)\n      switch (key) {\n        case '1': this.closeLeft(pageKey); break\n        case '2': this.closeRight(pageKey); break\n        case '3': this.closeOthers(pageKey); break\n        default: break\n      }\n    },\n    closeOthers (pageKey) {\n      const index = this.pageList.findIndex(item => item.fullPath === pageKey)\n      // 清除缓存\n      this.clearCaches = this.cachedKeys.filter((item, i) => i != index)\n      this.cachedKeys = this.cachedKeys.slice(index, index + 1)\n\n      this.pageList = this.pageList.slice(index, index + 1)\n      if (this.activePage != pageKey) {\n        this.activePage = pageKey\n        this.$router.push(this.activePage)\n      }\n    },\n    closeLeft (pageKey) {\n      const index = this.pageList.findIndex(item => item.fullPath === pageKey)\n      // 清除缓存\n      this.clearCaches = this.cachedKeys.filter((item, i) => i < index)\n      this.cachedKeys = this.cachedKeys.slice(index)\n\n      this.pageList = this.pageList.slice(index)\n      if (!this.pageList.find(item => item.fullPath === this.activePage)) {\n        this.activePage = pageKey\n        this.$router.push(this.activePage)\n      }\n    },\n    closeRight (pageKey) {\n      const index = this.pageList.findIndex(item => item.fullPath === pageKey)\n      // 清除缓存\n      this.clearCaches = this.cachedKeys.filter((item, i) => i > index)\n      this.cachedKeys = this.cachedKeys.slice(0, index+1)\n\n      this.pageList = this.pageList.slice(0, index + 1)\n      if (!this.pageList.find(item => item.fullPath === this.activePage)) {\n        this.activePage = pageKey\n        this.$router.push(this.activePage)\n      }\n    },\n    pageName(page) {\n      return this.$t(getI18nKey(page.matched[page.matched.length - 1].path))\n    },\n    closePageListener(event) {\n      const {closeRoute, nextRoute} = event.detail\n      const closePath = typeof closeRoute === 'string' ? closeRoute : closeRoute.path\n      this.remove(closePath, nextRoute)\n    },\n    ...mapMutations('setting', ['correctPageMinHeight'])\n  }\n}\n/**\n * 由于ant-design-vue组件库的TabPane组件暂不支持自定义监听器，无法直接获取到右键target所在标签页的 pagekey 。故增加此方法用于\n * 查询右键target所在标签页的标识 pagekey ，以用于自定义右键菜单的事件处理。\n * 注：TabPane组件支持自定义监听器后可去除该方法并重构 ‘自定义右键菜单的事件处理’\n * @param target 查询开始目标\n * @param depth 查询层级深度 （查找层级最多不超过3层，超过3层深度直接返回 null）\n * @returns {String}\n */\nfunction getPageKey (target, depth = 0) {\n  if (depth > 2 || !target) {\n    return null\n  }\n  return target.getAttribute('pagekey') || getPageKey(target.firstElementChild, ++depth)\n}\n</script>\n\n<style scoped lang=\"less\">\n  .tabs-view-content{\n    position: relative;\n  }\n</style>\n"]}]}