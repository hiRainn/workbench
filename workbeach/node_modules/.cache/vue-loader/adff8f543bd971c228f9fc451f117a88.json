{"remainingRequest":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/MAMP/gopath/vue-antd-admin/src/components/checkbox/ColorCheckbox.vue?vue&type=style&index=0&id=6e8777ea&lang=less&scoped=true&","dependencies":[{"path":"/Applications/MAMP/gopath/vue-antd-admin/src/components/checkbox/ColorCheckbox.vue","mtime":1598927028993},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/gopath/vue-antd-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50aGVtZS1jb2xvcnsKICBmbG9hdDogbGVmdDsKICB3aWR0aDogMjBweDsKICBoZWlnaHQ6IDIwcHg7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIGN1cnNvcjogcG9pbnRlcjsKICBtYXJnaW4tcmlnaHQ6IDhweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgY29sb3I6IEBiYXNlLWJnLWNvbG9yOwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cg=="},{"version":3,"sources":["ColorCheckbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ColorCheckbox.vue","sourceRoot":"src/components/checkbox","sourcesContent":["<template>\n  <div class=\"theme-color\" :style=\"{backgroundColor: color}\" @click=\"toggle\">\n    <a-icon v-if=\"sChecked\" type=\"check\" />\n  </div>\n</template>\n\n<script>\nconst Group = {\n  name: 'ColorCheckboxGroup',\n  props: {\n    defaultValues: {\n      type: Array,\n      required: false,\n      default: () => []\n    },\n    multiple: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n  data () {\n    return {\n      values: [],\n      options: []\n    }\n  },\n  computed: {\n    colors () {\n      let colors = []\n      this.options.forEach(item => {\n        if (item.sChecked) {\n          colors.push(item.color)\n        }\n      })\n      return colors\n    }\n  },\n  provide () {\n    return {\n      groupContext: this\n    }\n  },\n  watch: {\n    values(value) {\n      this.$emit('change', value, this.colors)\n    }\n  },\n  methods: {\n    handleChange (option) {\n      if (!option.checked) {\n        if (this.values.indexOf(option.value) > -1) {\n          this.values = this.values.filter(item => item != option.value)\n        }\n      } else {\n        if (!this.multiple) {\n          this.values = [option.value]\n          this.options.forEach(item => {\n            if (item.value != option.value) {\n              item.sChecked = false\n            }\n          })\n        } else {\n          this.values.push(option.value)\n        }\n      }\n    }\n  },\n  render (h) {\n    const clear = h('div', {attrs: {style: 'clear: both'}})\n    return h(\n      'div',\n      {},\n      [this.$slots.default, clear]\n    )\n  }\n}\n\nexport default {\n  name: 'ColorCheckbox',\n  Group: Group,\n  props: {\n    color: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [String, Number],\n      required: true\n    },\n    checked: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n  data () {\n    return {\n      sChecked: this.initChecked()\n    }\n  },\n  computed: {\n  },\n  inject: ['groupContext'],\n  watch: {\n    'sChecked': function () {\n      const value = {\n        value: this.value,\n        color: this.color,\n        checked: this.sChecked\n      }\n      this.$emit('change', value)\n      const groupContext = this.groupContext\n      if (groupContext) {\n        groupContext.handleChange(value)\n      }\n    }\n  },\n  created () {\n    const groupContext = this.groupContext\n    if (groupContext) {\n      groupContext.options.push(this)\n    }\n  },\n  methods: {\n    toggle () {\n      if (this.groupContext.multiple || !this.sChecked) {\n        this.sChecked = !this.sChecked\n      }\n    },\n    initChecked() {\n      let groupContext = this.groupContext\n      if (!groupContext) {\n        return this.checked\n      }else if (groupContext.multiple) {\n        return groupContext.defaultValues.indexOf(this.value) > -1\n      } else {\n        return groupContext.defaultValues[0] == this.value\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n  .theme-color{\n    float: left;\n    width: 20px;\n    height: 20px;\n    border-radius: 2px;\n    cursor: pointer;\n    margin-right: 8px;\n    text-align: center;\n    color: @base-bg-color;\n    font-weight: bold;\n  }\n</style>\n"]}]}